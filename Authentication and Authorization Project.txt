Project Title: MERN Authentication and Authorization

Project Description:

The MERN Authentication System project aims to provide users with a secure authentication mechanism using the MERN (MongoDB, Express.js, React.js, Node.js) stack. This project allows users to register, login, and view their profile securely. It includes both frontend and backend components for a seamless user experience.

Frontend:

The frontend of the project is developed using React.js, a popular JavaScript library for building user interfaces. It consists of several components:

App.jsx: This component serves as the entry point of the application. It sets up routing using React Router and provides context for managing user authentication tokens.

Navbar.jsx: The navigation bar component displays links for registration and login when the user is not authenticated.

Register.jsx: This component allows users to register by providing their personal information such as first name, last name, email, and password. It communicates with the backend to store user data securely.

Login.jsx: Users can log in using their email and password. This component sends login credentials to the backend for authentication and receives a JSON Web Token (JWT) upon successful login.

MyProfile.jsx: After successful authentication, users can view their profile information. This component fetches user data from the backend using the JWT for authorization.

Backend:

The backend of the project is developed using Node.js and Express.js, providing RESTful APIs for user authentication and profile management. It includes the following components:

userModel.js: Defines the MongoDB schema for user data, including fields such as first name, last name, email, password, etc. It ensures data integrity and validation before storing it in the database.

dbConnect.js: Handles the connection to the MongoDB database using Mongoose. It establishes a connection with the database upon server initialization.

server.js: This file contains the main server logic. It sets up Express.js routes for user registration, login, and profile retrieval. It utilizes bcrypt for password hashing and JWT for token-based authentication.

middleware.js: Defines middleware functions for JWT authentication. It verifies the JWT token sent in the request headers and extracts the user ID for further authorization.

Overall, the MERN Authentication System project demonstrates the implementation of a secure authentication flow using modern web technologies, ensuring user data privacy and integrity.






.......................................................................................Frontend...........................................................................................

...................................App.jsx..................................
import React, { useState, createContext } from 'react'
import { BrowserRouter, Routes, Route} from 'react-router-dom';
import MyProfile from './components/secure-routers/MyProfile';
import Nav from './components/unsecure-routers/Nav'
import Login from './components/unsecure-routers/Login';
import Register from './components/unsecure-routers/Register';


export const store = createContext();

function App() {
  const [token, setToken] = useState(null)
  return (
    <div>
      <store.Provider value={[token, setToken]}>          
        <BrowserRouter>
        <Nav />
        <Routes>
        	Route path='/login' element={<Login/>} />
        	<Route path='/myprofile' element={<MyProfile/>} />
          </Routes>      
        </BrowserRouter>
      </store.Provider>

    </div>
  );
}

export default App;


...................................Navbar.jsx..................................
import React, { useContext } from 'react';
import { Link } from 'react-router-dom';
import { store } from '../../App';

const Nav = () => {
  const [token, setToken] = useContext(store)
  return (
    <>
      {
        !token &&

        <nav className='bg-gray-600 p-4'>
        <div className='container mx-auto flex justify-between items-center'>
          <h1 className='text-3xl font-bold text-white'>My Website</h1>
          <ul className='flex space-x-4 text-lg text-white'>
            {/* <li><Link to="/register" className='bg-blue-700 p-2 hover:text-blue-700 hover:bg-white'>Register</Link></li> */}
            <li><Link to="/register" className='bg-blue-700 text-white py-2 px-4 rounded-md transition duration-300 ease-in-out hover:bg-white hover:text-blue-900'>Register</Link></li>
            <li><Link to="/login" className='bg-blue-700 text-white py-2 px-4 rounded-md transition duration-300 ease-in-out hover:bg-white hover:text-blue-900'>Login</Link></li>
            {/* <li><button className='bg-blue-700 p-2'><Link to="/login" className='hover:text-gray-300'>Login</Link></button></li> */}
          </ul>
        </div>
      </nav>
      }
    </>
  );
};

export default Nav;



...................................Register.jsx..................................
import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import axios from "axios";

function Register() {
  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    surName: '',
    email: '',
    password: '',
    confirmPassword: ''
  });

  const changeHandler = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const submitHandler = async (e) => {
    e.preventDefault();
    axios.post("http://127.0.0.5:5000/register", formData)
    // .then(res => alert(res.formData) )
      .then(res => alert("Data Stored in database) )

  };

  return (
    <div className="max-w-md mx-auto mt-8 p-6 bg-white rounded-md shadow-md">
      <h3 className="text-3xl font-semibold text-center mb-6">Register</h3>
      <form onSubmit={submitHandler}>
        <input
          type="text"
          name="firstName"
          value={formData.firstName}
          onChange={changeHandler}
          placeholder="First Name"
          className="w-full mb-4 p-2 rounded-md border border-gray-300 focus:outline-none focus:border-blue-500"
        />
        <input
          type="text"
          name="lastName"
          value={formData.lastName}
          onChange={changeHandler}
          placeholder="Last Name"
          className="w-full mb-4 p-2 rounded-md border border-gray-300 focus:outline-none focus:border-blue-500"
        />
        <input
          type="text"
          name="surName"
          value={formData.surName}
          onChange={changeHandler}
          placeholder="Surname"
          className="w-full mb-4 p-2 rounded-md border border-gray-300 focus:outline-none focus:border-blue-500"
        />
        <input
          type="email"
          name="email"
          value={formData.email}
          onChange={changeHandler}
          placeholder="Email"
          className="w-full mb-4 p-2 rounded-md border border-gray-300 focus:outline-none focus:border-blue-500"
        />
        <input
          type="password"
          name="password"
          value={formData.password}
          onChange={changeHandler}
          placeholder="Password"
          className="w-full mb-4 p-2 rounded-md border border-gray-300 focus:outline-none focus:border-blue-500"
        />
        <input
          type="password"
          name="confirmPassword"
          value={formData.confirmPassword}
          onChange={changeHandler }
          placeholder="Confirm Password"
          className="w-full mb-4 p-2 rounded-md border border-gray-300 focus:outline-none focus:border-blue-500"
        />
        <button
          type="submit"
          className="w-full bg-blue-500 text-white p-2 rounded-md hover:bg-blue-600 focus:outline-none focus:bg-blue-600"
        >
          Register
        </button>
      </form>
      <div className="mt-4 text-center">
        <span>Already have an account? </span>
        <Link to="/login" className="text-blue-500 hover:text-blue-600">Login</Link>
      </div>
    </div>
  );
}

export default Register;


...................................Login.jsx..................................
import React, { useState, useContext } from 'react';
import { Link, Navigate } from 'react-router-dom';
import axios from "axios";
import { store } from '../../App';

function Login() {
  const [token, setToken] = useContext(store)
  const [formData, setFormData] = useState({
    email: '',
    password: ''
  });

  const changeHandler = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const submitHandler = async (e) => {
    e.preventDefault();
    axios.post("http://127.0.0.5:5000/login", formData)
      .then(res => setToken(res.data.token))
        .catch(err => console.log(err))
  };
  if(token) {
    return <Navigate to="/myprofile" />
  }

  
  return (
    <div className="max-w-md mx-auto mt-8 p-6 bg-white rounded-md shadow-md">
      <h3 className="text-3xl font-semibold text-center mb-6">Login</h3>
      <form onSubmit={submitHandler}>
        <input
          type="email"
          name="email"
          value={formData.email}
          onChange={changeHandler}
          placeholder="Email"
          className="w-full mb-4 p-2 rounded-md border border-gray-300 focus:outline-none focus:border-blue-500"
        />
        <input
          type="password"
          name="password"
          value={formData.password}
          onChange={changeHandler}
          placeholder="Password"
          className="w-full mb-4 p-2 rounded-md border border-gray-300 focus:outline-none focus:border-blue-500"
        />
        <button
          type="submit"
          className="w-full bg-blue-500 text-white p-2 rounded-md hover:bg-blue-600 focus:outline-none focus:bg-blue-600"
        >
          Login
        </button>
      </form>
      <div className="mt-4 text-center">
        <span>Don't have an account? </span>
        <Link to="/register" className="text-blue-500 hover:text-blue-600">Register</Link>
      </div>
    </div>
  );
}

export default Login;


...................................Login.jsx..................................
import React, { useState, useContext, useEffect } from 'react';
import { store } from '../../App';
import { Navigate } from 'react-router-dom';
import axios from 'axios';
import Navbar from '../secure-routers/Navbar';

const MyProfile = () => {
  const [token, setToken] = useContext(store);
  const [formData, setFormData] = useState(null);

  useEffect(() => {
    axios.get("http://127.0.0.5:5000/myprofile", {
      headers: {
        "Authorization": `Bearer ${token}`
      }
    })
    .then(res => setFormData(res.data))
    .catch(err => console.log(err));
  }, [token]);
  
  if (!token) {
    return <Navigate to="/login" />;
  }

  return (
    <div>
      <Navbar />
      {
        formData &&
        <center className='text-4xl py-80'>
          <h1>This is My Profile</h1>
          <h1>Welcome to {formData.firstName} {formData.lastName} {formData.surName}</h1>
          <button className='bg-blue-700 text-2xl text-white rounded-md px-2 py-1' onClick={() => setToken(null)}>Logout</button>
        </center>
      }
    </div>
  );
}

export default MyProfile;




.......................................................................................Backend...........................................................................................


...................................userModel.jsx..................................
//  Schema Validation

const mongoose = require("mongoose")

const userSchema = mongoose.Schema({
    firstName: {
        type: String,
        required: true
    },
    lastName: {
        type: String
    },
    surName: {
        type: String,
        required: true
    },
    image: {
        type: String,
        // required: true
    },
    dateOfBirth: {
        type: Date,
        // required: true
    },
    gender: {
        type: String,
        enum: ["male", "female", "others"],
        // required: true
    },
    email: {
        type: String,
        required: true,
        unique: true
    },
    mobileNumber: {
        type: Number,
        // required: true
    },
    instituteName: {
        type: String,
        // required: true
    },
    qualification: {
        type: [String],
        // required: true
    },
    course: {
        type: String,
        enum: ["mern", "python", "java"],
        // required: true,
    },
    yearOfPassing: {
        type: Date,
        // required: true
    },
    password: {
        type: String,
        required: true
    },
    confirmPassword: {
        type: String,
        required: true
    },
    description: {
        type: String,
        // required: true
    },
    tc: {
        type: Boolean,
        // required: true
    }
})

const userModel = mongoose.model("user", userSchema)

module.exports = { userModel }




...................................dbConnect.jsx..................................
// Mongodb connection

const mongoose = require("mongoose")
const url = "mongodb://127.0.0.1/MyOwnProject"

const dbConnect = async(req,res) => {
    try {
        await mongoose.connect(url)
        console.log("Database is Connected")
    }
    catch(err) {
        console.log("Something went to wrong while connecting db", err)
    }
}

module.exports = { dbConnect }



...................................server.jsx..................................
const express = require("express")
const { dbConnect } = require("./db/dbConnect")
const { userModel } = require("./model/userModel")
const bcrypt = require("bcrypt")
const jwt = require("jsonwebtoken")
const middleware = require("./middleware")
const cors = require("cors")


const app = express()
const PORT = 5000
const hostName = "127.0.0.5"

app.use(express.json())
// app.use(cors())
// app.use(cors({origin:"*"}))
app.use(cors({
    origin: 'http://localhost:5174'
}));


app.get("/", (req, res) => {
    console.log(req.method, req.url) // when page is re-freshed/ re-load
    res.send("<h1>Hello, I am Server</h1>")
})

app.post("/register", async(req, res) => {
    // console.log(req.method, req.url)
    const user = req.body 
    // console.log(user)
    const { email, password, confirmPassword } = user
    if(email) {
        const existingUser = await userModel.findOne({ email })
        if(existingUser) {
            return res.status(400).send("User Already Exist, Please Login") 
         }
    }
    if(password !== confirmPassword) {
        return res.status(400).send("Passwords are not matching")
    }
    const hashedPassword = await bcrypt.hash(password, 10)
    const hashedConfirmPassword = await bcrypt.hash(confirmPassword, 10)


    let newUserData = new userModel({
        ...user,
        password: hashedPassword,
        confirmPassword: hashedConfirmPassword,
    })

    try {
        await newUserData.save()
        res.status(201).send("Registered Successfully Completed, Data stored in db")

    }
    catch(err) {
        res.status(500).send("Error while Storing data in DB");
    }

})


app.post("/login", async(req,res) => {
    data = req.body
    // console.log(data);
    const {email, password} = data

    try {
        let existingUser = await userModel.findOne({ email })
        if(!existingUser) {
            return res.status(404).send("User Not Found, Please Register")
        }
        else{
            let isMatched = await bcrypt.compare(password,existingUser.password)
            // console.log(isMatched);
            if(!isMatched) {
                return res.status(400).send("Passwords are not matching")
            }
            else {
                let token = jwt.sign(existingUser._id.toString(), "Pranavi")
                return res.status(200).send({ token })
            }
        }
    }
    catch(err) {
        res.status(500).send("Something went to wrong " + err.message)
    }
}) 

//token verification
app.get("/getuser", async(req,res) => {
    console.log(req.headers.authorization);
    let token = req?.headers?.authorization?.split(" ")?.[1]
// or 
   // let token = req.headers.authorization.slice(7)
    console.log(token);

    let userId = jwt.verify(token, "Pranavi")
    // console.log(userId);
    if(!userId) {
        return res.status(400).send({message: "Token is not Valid"})
    }
    else {
        let user = await userModel.findById(userId).select("-_id -password -confirmPassword -__v")
        console.log(user);
        if(user) {
            return res.status(200).send(user)
        }
        else {
            return res.status(404).send({message: "User not found"})
        }
    }
})

app.get("/myprofile", middleware, async(req,res)=> {
    try{
        // let userId = jwt.verify(token, "Pranavi")
        let userId = req.user
        let existingUser = await userModel.findById(userId)
        if(!existingUser) {
            return res.status(400).send("User not found")
        }
        return res.json(existingUser)
    }
    catch(err) {
        console.log(err);
        res.status(500).send("Invalid Token" + err)
    }
})



app.listen(PORT, hostName, () => {
    console.log(`server running at http://${hostName}:${PORT}`)
    dbConnect()
})



...................................middleware.jsx..................................
const jwt = require("jsonwebtoken");

const authMiddleware = async (req, res, next) => {
    try {
        const token = req.headers.authorization?.split(" ")[1];
        if (!token) {
            return res.status(401).send("Token not found");
        }

        const userId = jwt.verify(token, "Pranavi");
        if (!userId) {
            return res.status(401).send("Invalid token");
        }

        req.user = userId; // Set the user ID in the request object
        next(); // Call next middleware
    } catch (err) {
        console.error(err);
        res.status(500).send("Server Error");
    }
};

module.exports = authMiddleware;

