I will provide my whole project check any errors and mistakes modify
Backend:
const express = require("express")
const { dbConnect } = require("./db/dbConnect")
const { userModel } = require("./model/userModel")
const bcrypt = require("bcrypt")
const jwt = require("jsonwebtoken")
const middleware = require("./middleware")
const cors = require("cors")

const app = express()

const PORT = 5000
const hostName = "127.0.0.5"

app.use(express.json())
app.use(cors())
// app.use(cors({origin:"*"}))

app.get("/", (req, res) => {
    console.log(req.method, req.url) // when page is re-freshed/ re-load
    res.send("<h1>Hello, I am Server</h1>")
})

app.post("/register", async(req, res) => {
    // console.log(req.method, req.url)
    const user = req.body 
    // console.log(user)
    const { email, password, confirmPassword } = user
    if(email) {
        const existingUser = await userModel.findOne({ email })
        if(existingUser) {
            return res.status(400).send("User Already Exist, Please Login") 
         }
    }
    if(password !== confirmPassword) {
        return res.status(400).send("Passwords are not matching")
    }

    const hashedPassword = await bcrypt.hash(password, 10)
    const hashedConfirmPassword = await bcrypt.hash(confirmPassword, 10)


    let newUserData = new userModel({
        ...user,
        password: hashedPassword,
        confirmPassword: hashedConfirmPassword,
    })

    try {
        await newUserData.save()
        res.status(201).send("Registered Successfully Completed, Data stored in db")

    }
    catch(err) {
        res.status(500).send("Error while Storing data in DB");
    }

})


app.post("/login", async(req,res) => {
    data = req.body
    // console.log(data);
    const {email, password} = data

    try {
        let existingUser = await userModel.findOne({ email })
        if(!existingUser) {
            return res.status(404).send("User Not Found")
        }
        else{
            let isMatched = await bcrypt.compare(password,existingUser.password)
            // console.log(isMatched);
            if(!isMatched) {
                return res.status(400).send("Passwords are not matching")
            }
            else {
                let token = jwt.sign(existingUser._id.toString(), "Pranavi")
                return res.status(200).send({ token })
            }
        }
    }
    catch(err) {
        res.status(500).send("Something went to wrong " + err.message)
    }
}) 




//token verification
app.get("/getuser", async(req,res) => {
    console.log(req.headers.authorization);
    let token = req?.headers?.authorization?.split(" ")?.[1]
// or 
   // let token = req.headers.authorization.slice(7)
    console.log(token);

    let userId = jwt.verify(token, "Pranavi")
    // console.log(userId);
    if(!userId) {
        return res.status(400).send({message: "Token is not Valid"})
    }
    else {
        let user = await userModel.findById(userId).select("-_id -password -confirmPassword -__v")
        console.log(user);
        if(user) {
            return res.status(200).send(user)
        }
        else {
            return res.status(404).send({message: "User not found"})
        }
    }
})

app.get("/myprofile", middleware, async(req,res)=> {
    try{
        // let userId = jwt.verify(token, "Pranavi")
        let userId = req.user
        let existingUser = await userModel.findById(userId)
        if(!existingUser) {
            return res.status(400).send("User not found")
        }
        res.json(existingUser)
    }
    catch(err) {
        res.status(500).send("Invalid Token" + err)
    }
})



app.listen(PORT, hostName, () => {
    console.log(`server running at http://${hostName}:${PORT}`)
    dbConnect()
})
// Mongodb connection

const mongoose = require("mongoose")
const url = "mongodb://127.0.0.1/MyOwnProject"

const dbConnect = async(req,res) => {
    try {
        await mongoose.connect(url)
        console.log("Database is Connected")
    }
    catch(err) {
        console.log("Something went to wrong while connecting db", err)
    }
}

module.exports = { dbConnect }
//  Schema Validation

const mongoose = require("mongoose")

const userSchema = mongoose.Schema({
    firstName: {
        type: String,
        required: true
    },
    lastName: {
        type: String
    },
    surName: {
        type: String,
        required: true
    },
    image: {
        type: String,
        // required: true
    },
    dateOfBirth: {
        type: Date,
        // required: true
    },
    gender: {
        type: String,
        enum: ["male", "female", "others"],
        // required: true
    },
    email: {
        type: String,
        required: true,
        unique: true
    },
    mobileNumber: {
        type: Number,
        // required: true
    },
    instituteName: {
        type: String,
        // required: true
    },
    qualification: {
        type: [String],
        // required: true
    },
    course: {
        type: String,
        enum: ["mern", "python", "java"],
        // required: true,
    },
    yearOfPassing: {
        type: Date,
        // required: true
    },
    password: {
        type: String,
        required: true
    },
    confirmPassword: {
        type: String,
        required: true
    },
    description: {
        type: String,
        // required: true
    },
    tc: {
        type: Boolean,
        // required: true
    }
})



const jwt = require("jsonwebtoken");

const authMiddleware = async (req, res, next) => {
    try {
        const token = req.headers.authorization?.split(" ")[1];
        if (!token) {
            return res.status(401).send("Token not found");
        }

        const userId = jwt.verify(token, "Pranavi");
        if (!userId) {
            return res.status(401).send("Invalid token");
        }

        req.user = userId; // Set the user ID in the request object
        next(); // Call next middleware
    } catch (err) {
        console.error(err);
        res.status(500).send("Server Error");
    }
};

module.exports = authMiddleware;





// const userModel = mongoose.model("user", userSchema)

// module.exports = { userModel }
// const jwt = require("jsonwebtoken");

// module.exports = async function(req, res, next) {
//     try {
//         console.log(req.headers.authorization);
//         let token = req?.headers?.authorization?.split(" ")?.[1]
//         // or 
//            // let token = req.headers.authorization.slice(7)
//             console.log(token);
//     //    let token = req.header("x-token");
//         if(!token) {

//     //     return res.status(400).send("Token Not Found");
//     //    }
       
//             let userId = jwt.verify(token, "Pranavi")
//             if(!userId) {
//                 return res.status(400).send({message: "Token is not Valid"})
//             }
//             else {
//                 let user = await userModel.findById(userId)
//                 if(user) {
//                     return res.status(200).send(user)
//                 }
//                 else {
//                     return res.status(404).send({message: "User not found"})
//                 }
//             }
//             next()
//         }
//     }
//     catch(err) {
//         console.log(err);
//         return res.status(500).send("Server Error")
//     }
// }









Frontend: 
import React, { useState, createContext } from 'react'
import { BrowserRouter, Routes, Route} from 'react-router-dom';
// import Navbar from './components/secure-routers/Navbar';
// import Home from './components/secure-routers/Home'
import MyProfile from './components/secure-routers/MyProfile';
// import About from './components/About'
// import Product  from './components/Product';
// import Contact from './components/Contact';
import Nav from './components/unsecure-routers/Nav'
import Login from './components/unsecure-routers/Login';
import Register from './components/unsecure-routers/Register';
// import Settings from './components/Settings';
// import SignOut from './components/SignOut';

export const store = createContext();

function App() {
  const [token, setToken] = useState(null)
  return (
    <div>
      <store.Provider value={[token, setToken]}>
          
        <BrowserRouter>
        <Nav />
        {/* <Navbar /> */}
        <Routes>
        <Route path='/register' element={<Register/>} />
        <Route path='/login' element={<Login/>} />
          {/* <Route path='/' element={<Home/>} /> */}
          {/* <Route path='/about' element={<About/>} />
          <Route path='/product' element={<Product/>} />
          <Route path='/contact' element={<Contact/>} /> */}
        <Route path='/myprofile' element={<MyProfile/>} />
          {/* <Route path='/settings' element={<Settings/>} />
          <Route path='/signout' element={<SignOut/>} /> */}

          </Routes>      
        </BrowserRouter>

      </store.Provider>

    </div>
  );
}

export default App;
import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import axios from "axios";

function Register() {
  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    surName: '',
    email: '',
    password: '',
    confirmPassword: ''
  });

  const changeHandler = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const submitHandler = async (e) => {
    e.preventDefault();
    axios.post("http://127.0.0.5:5000/register", formData)
      .then(res => alert(res.formData) )
  };

  return (
    <div className="max-w-md mx-auto mt-8 p-6 bg-white rounded-md shadow-md">
      <h3 className="text-3xl font-semibold text-center mb-6">Register</h3>
      <form onSubmit={submitHandler}>
        <input
          type="text"
          name="firstName"
          value={formData.firstName}
          onChange={changeHandler}
          placeholder="First Name"
          className="w-full mb-4 p-2 rounded-md border border-gray-300 focus:outline-none focus:border-blue-500"
        />
        <input
          type="text"
          name="lastName"
          value={formData.lastName}
          onChange={changeHandler}
          placeholder="Last Name"
          className="w-full mb-4 p-2 rounded-md border border-gray-300 focus:outline-none focus:border-blue-500"
        />
        <input
          type="text"
          name="surName"
          value={formData.surName}
          onChange={changeHandler}
          placeholder="Surname"
          className="w-full mb-4 p-2 rounded-md border border-gray-300 focus:outline-none focus:border-blue-500"
        />
        <input
          type="email"
          name="email"
          value={formData.email}
          onChange={changeHandler}
          placeholder="Email"
          className="w-full mb-4 p-2 rounded-md border border-gray-300 focus:outline-none focus:border-blue-500"
        />
        <input
          type="password"
          name="password"
          value={formData.password}
          onChange={changeHandler}
          placeholder="Password"
          className="w-full mb-4 p-2 rounded-md border border-gray-300 focus:outline-none focus:border-blue-500"
        />
        <input
          type="password"
          name="confirmPassword"
          value={formData.confirmPassword}
          onChange={changeHandler }
          placeholder="Confirm Password"
          className="w-full mb-4 p-2 rounded-md border border-gray-300 focus:outline-none focus:border-blue-500"
        />
        <button
          type="submit"
          className="w-full bg-blue-500 text-white p-2 rounded-md hover:bg-blue-600 focus:outline-none focus:bg-blue-600"
        >
          Register
        </button>
      </form>
      <div className="mt-4 text-center">
        <span>Already have an account? </span>
        <Link to="/login" className="text-blue-500 hover:text-blue-600">Login</Link>
      </div>
    </div>
  );
}

export default Register;


import React, { useState, useContext } from 'react';
import { Link, Navigate } from 'react-router-dom';
import axios from "axios";
import { store } from '../../App';

function Login() {
  const [token, setToken] = useContext(store)
  const [formData, setFormData] = useState({
    email: '',
    password: ''
  });

  const changeHandler = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const submitHandler = async (e) => {
    e.preventDefault();
    axios.post("http://127.0.0.5:5000/login", formData)
      .then(res => setToken(res.data.token))
	.catch(err=> console.log(err))
  };
  if(token) {
    return <Navigate to="/myprofile" />
  }

  
  return (
    <div className="max-w-md mx-auto mt-8 p-6 bg-white rounded-md shadow-md">
      <h3 className="text-3xl font-semibold text-center mb-6">Login</h3>
      <form onSubmit={submitHandler}>
        <input
          type="email"
          name="email"
          value={formData.email}
          onChange={changeHandler}
          placeholder="Email"
          className="w-full mb-4 p-2 rounded-md border border-gray-300 focus:outline-none focus:border-blue-500"
        />
        <input
          type="password"
          name="password"
          value={formData.password}
          onChange={changeHandler}
          placeholder="Password"
          className="w-full mb-4 p-2 rounded-md border border-gray-300 focus:outline-none focus:border-blue-500"
        />
        <button
          type="submit"
          className="w-full bg-blue-500 text-white p-2 rounded-md hover:bg-blue-600 focus:outline-none focus:bg-blue-600"
        >
          Login
        </button>
      </form>
      <div className="mt-4 text-center">
        <span>Don't have an account? </span>
        <Link to="/register" className="text-blue-500 hover:text-blue-600">Register</Link>
      </div>
    </div>
  );
}

export default Login;
import React, { useState, useContext, useEffect } from 'react';
import {store} from '../../App'
import { Navigate } from 'react-router-dom'
import axios from 'axios'

const MyProfile = () => {
  const [token, setToken] = useContext(store)
  const [formData, setFormData] = useState(null)
  useEffect(()=>{
    axios.get("http://127.0.0.5:5000/myprofile", {
      headers: {
        // "userId": token
        "Authorization": `Bearer ${token}` // Use Authorization header with Bearer token
      }
    }).then(res => setFormData(res.data))
        .catch(err => console.log(err))
  }, [token])
  if(!token) {
    return <Navigate to="/login" />
  }
  return (
    <div>
      {
        formData &&
        <center>
          <h1>This My Profile</h1>
          <h1>Welcome to {formData.firstName} {formData.lastName} {formData.surname}</h1>
          {/* <h1>Welcome to {formData.firstName}</h1> */}
        </center>
      }
    </div>
  )
}

export default MyProfile
import React from 'react';
import { Link } from 'react-router-dom';

const Nav = () => {
  return (
    <nav className='bg-gray-600 p-4'>
      <div className='container mx-auto flex justify-between items-center'>
        <h1 className='text-3xl font-bold text-white'>My Website</h1>
        <ul className='flex space-x-4 text-lg text-white'>
          {/* <li><Link to="/register" className='bg-blue-700 p-2 hover:text-blue-700 hover:bg-white'>Register</Link></li> */}
          <li><Link to="/register" className='bg-blue-700 text-white py-2 px-4 rounded-md transition duration-300 ease-in-out hover:bg-white hover:text-blue-900'>Register</Link></li>
          <li><Link to="/login" className='bg-blue-700 text-white py-2 px-4 rounded-md transition duration-300 ease-in-out hover:bg-white hover:text-blue-900'>Login</Link></li>
          {/* <li><button className='bg-blue-700 p-2'><Link to="/login" className='hover:text-gray-300'>Login</Link></button></li> */}
        </ul>
      </div>
    </nav>
  );
};

export default Nav;
This my whole project Authentication and Authorization both frontend and backend with database connection

